<div class="max-w-4xl mx-auto px-4">
  <div class="mb-8">
    <input type="text" 
           placeholder="Search posts..." 
           class="w-full p-4 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
           oninput="performSearch(event)">
  </div>

  <div id="results" class="space-y-6">
    ${posts.map(post => `
      <article class="post-card p-6 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow">
        <h2 class="text-2xl font-semibold mb-2">
          <a href="/${post.slug}" class="text-blue-600 hover:text-blue-800">
            ${post.title}
          </a>
        </h2>
        <div class="text-sm text-gray-500 mb-2">
          <time>${post.date.toLocaleDateString()}</time> â€¢ 
          ${post.tags.map(t => `#${t}`).join(' ')}
        </div>
        <p class="text-gray-700">${post.description}</p>
      </article>
    `).join('')}
  </div>
    const searchInput = document.getElementById('searchInput');
    let selectedIndex = -1;
    const fuseOptions = {
      keys: [
        { name: 'title', weight: 0.5 },
        { name: 'tags', weight: 0.3 },
        { name: 'content', weight: 0.2 }
      ],
      includeScore: true,
      minMatchCharLength: 2,
      threshold: 0.3,
      ignoreLocation: true,
      useExtendedSearch: true
    };

    let fuse = null;

    // Initialize search index
    fetch('/search-index.json')
      .then(response => response.json())
      .then(data => {
        fuse = new Fuse(data, fuseOptions);
        searchInput.removeAttribute('disabled');
        searchInput.placeholder = "Search posts...";
      });

    // Debounce search input
    const searchHandler = debounce((query) => {
      if (!fuse) return;

      const results = query ? fuse.search(query) : [];
      updateSearchResults(results);
      selectedIndex = -1; // Reset selection
    }, 300);

    // Input event listener
    searchInput.addEventListener('input', (e) => {
      const query = e.target.value.trim();
      searchHandler(query);
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      const results = document.querySelectorAll('.search-result-item');
      
      if (!results.length || !['ArrowUp', 'ArrowDown', 'Enter'].includes(e.key)) return;

      e.preventDefault();

      switch(e.key) {
        case 'ArrowDown':
          selectedIndex = selectedIndex >= results.length - 1 ? 0 : selectedIndex + 1;
          break;
        case 'ArrowUp':
          selectedIndex = selectedIndex <= 0 ? results.length - 1 : selectedIndex - 1;
          break;
        case 'Enter':
          if (selectedIndex >= 0) {
            results[selectedIndex].click();
          }
          return;
      }

      results.forEach((result, index) => {
        result.classList.toggle('selected', index === selectedIndex);
        if (index === selectedIndex) {
          result.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
      });
    });

    function updateSearchResults(results) {
      const resultsContainer = document.getElementById('searchResults');
      resultsContainer.innerHTML = '';

      if (results.length === 0) {
        resultsContainer.style.display = 'none';
        return;
      }

      const fragment = document.createDocumentFragment();

      results.slice(0, 10).forEach((result, index) => {
        const { item } = result;
        const div = document.createElement('div');
        div.className = 'search-result-item bg-white p-4 mb-2 rounded shadow-sm hover:shadow-md transition-shadow cursor-pointer';
        div.innerHTML = `
          <h3 class="text-lg font-semibold mb-1">${highlightMatches(item.title, result.matches.find(m => m.key === 'title'))}</h3>
          ${item.tags.length ? `<div class="tags text-sm text-gray-600 mb-1">${item.tags.map(tag => `<span class="tag">#${tag}</span>`).join(' ')}</div>` : ''}
          <p class="text-gray-700 text-sm">${highlightMatches(truncate(item.content, 150), result.matches.find(m => m.key === 'content'))}</p>
          <div class="mt-2 text-xs text-gray-500">${new Date(item.date).toLocaleDateString()}</div>
        `;
        div.onclick = () => window.location.href = `/posts/${item.slug}`;
        fragment.appendChild(div);
      });

      resultsContainer.appendChild(fragment);
      resultsContainer.style.display = 'block';
    }

    function highlightMatches(text, match) {
      if (!match || !match.indices || match.indices.length === 0) return text;
      
      let result = '';
      let lastIndex = 0;
      const indices = match.indices;

      indices.forEach(([start, end]) => {
        result += text.substring(lastIndex, start);
        result += `<span class="highlight bg-yellow-200 px-1 rounded">${text.substring(start, end + 1)}</span>`;
        lastIndex = end + 1;
      });

      result += text.substring(lastIndex);
      return result;
    }

    function truncate(text, length) {
      return text.length > length ? text.substring(0, length) + '...' : text;
    }

    function debounce(func, wait, immediate) {
      let timeout;
      return function executedFunction() {
        const context = this;
        const args = arguments;
        const later = () => {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    }
</script>
