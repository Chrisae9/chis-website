<div class="max-w-4xl mx-auto px-4">
  <div class="mb-8">
    <input type="text" 
           placeholder="Search posts..." 
           class="w-full p-4 rounded-lg border border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
           oninput="performSearch(event)">
  </div>

  <div id="results" class="space-y-6">
    <% posts.forEach(post => { %>
      <article class="post-card p-6 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow">
        <h2 class="text-2xl font-semibold mb-2">
          <a href="/<%= post.slug %>" class="text-blue-600 hover:text-blue-800">
            <%= post.title %>
          </a>
        </h2>
        <div class="text-sm text-gray-500 mb-2">
          <time><%= post.date.toLocaleDateString() %></time> â€¢ 
          <%= post.tags.map(t => `#${t}`).join(' ') %>
        </div>
        <p class="text-gray-700"><%= post.description %></p>
      </article>
    <% }) %>
  </div>
</div>

<script>
  // Initialize Fuse.js with search options
  const fuse = new Fuse([], {
    keys: [
      { name: 'title', weight: 0.5 },
      { name: 'tags', weight: 0.3 },
      { name: 'content', weight: 0.2 }
    ],
    includeMatches: true,
    minMatchCharLength: 2,
    threshold: 0.3
  });

  function performSearch(e) {
    const query = e.target.value.trim();
    if (!query) {
      currentResults = [];
      updateResults([]);
      return;
    }

    const cached = getSearchIndexCache();
    if (cached) {
      fuse.setCollection(cached);
      currentResults = fuse.search(query);
      updateResults(currentResults);
    } else {
      fetch('/search-index.json')
        .then(r => r.json())
        .then(index => {
          fuse.setCollection(index);
          saveSearchIndexCache(index);
          currentResults = fuse.search(query);
          updateResults(currentResults);
        });
    }
  }

  // Keyboard navigation handlers
  document.addEventListener('keydown', (e) => {
    if (['ArrowUp', 'ArrowDown', 'Enter'].includes(e.key)) {
      const results = document.querySelectorAll('.post-card');
      if (results.length === 0) return;

      e.preventDefault();
      if (e.key === 'ArrowDown') {
        selectedIndex = Math.min(selectedIndex + 1, results.length - 1);
      } else if (e.key === 'ArrowUp') {
        selectedIndex = Math.max(selectedIndex - 1, -1);
      } else if (e.key === 'Enter' && selectedIndex >= 0) {
        results[selectedIndex].click();
      }

      results.forEach((r, i) => 
        r.classList.toggle('keyboard-selected', i === selectedIndex));
    }
  });

  function escapeHtml(unsafe) {
    return unsafe?.replace(/[&<"'>]/g, m => 
      ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[m]));
  }

  function debounce(func, timeout = 300) {
    let timer;
    return (...args) => {
      clearTimeout(timer);
      timer = setTimeout(() => func.apply(this, args), timeout);
    };
  }
</script>
